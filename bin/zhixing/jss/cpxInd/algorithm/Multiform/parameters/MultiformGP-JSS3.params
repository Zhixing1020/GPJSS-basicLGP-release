#print-unaccessed-params = true
#print-used-params = true

#multiform GP

# ==============================
# Administrative parameters
# ==============================
evalthreads = 1
breedthreads = 1
jobs = 1
seed.0 = 4
checkpoint = false
checkpoint-modulo = 1
checkpoint-prefix = ec

# ==============================
# Basic evolution parameters
# ==============================
state = yimei.jss.gp.GPRuleEvolutionState
finish = ec.simple.SimpleFinisher
exch = ec.simple.SimpleExchanger
breed =	ec.simple.SimpleBreeder
eval = ec.simple.SimpleEvaluator
stat = ec.simple.SimpleStatistics
stat.file =$out.stat
stat.num-children = 1
stat.child.0 = zhixing.jss.cpxInd.algorithm.Multiform.statistic.MultiFormStatistics
stat.child.0.file = $outtabular.stat

generations = 50
quit-on-run-complete = true

pop = ec.Population
pop.subpops = 2
pop.subpop.0 = ec.Subpopulation
pop.subpop.0.size =	512
pop.subpop.1 = ec.Subpopulation
pop.subpop.1.size =	512

breed.elite.0 = 5
breed.elite.1 = 5


# ==============================
# GP general parameters
# ==============================

# TGP population parameters
pop.subpop.0.species = zhixing.jss.cpxInd.species.CpxGPSpecies
pop.subpop.0.species.ind = zhixing.jss.cpxInd.algorithm.Multiform.individual.TGPIndividual4MForm
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc1

#pop.subpop.0.species.fitness = ec.gp.koza.KozaFitness
pop.subpop.0.species.fitness = ec.multiobjective.MultiObjectiveFitness
pop.subpop.0.species.fitness.num-objectives = 1
pop.subpop.0.species.fitness.maximize = false
pop.subpop.0.duplicate-retries = 100

# GP initializer
init = ec.gp.GPInitializer

# GP breeding pipeline
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.num-sources = 4

pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.5
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = same
pop.subpop.0.species.pipe.source.0.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.0.ns.1 = same
pop.subpop.0.species.pipe.source.0.ns.0.terminals = 0.1
pop.subpop.0.species.pipe.source.0.ns.0.nonterminals = 0.9
pop.subpop.0.species.pipe.source.0.ns.0.root = 0.0
pop.subpop.0.species.pipe.source.0.maxdepth = 8
pop.subpop.0.species.pipe.source.0.tries = 1


pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.15
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.1.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.1.ns.0.terminals = 0.1
pop.subpop.0.species.pipe.source.1.ns.0.nonterminals = 0.9
pop.subpop.0.species.pipe.source.1.ns.0.root = 0.0
pop.subpop.0.species.pipe.source.1.build.0 = ec.gp.koza.GrowBuilder
pop.subpop.0.species.pipe.source.1.build.0.min-depth = 4
pop.subpop.0.species.pipe.source.1.build.0.max-depth = 4
pop.subpop.0.species.pipe.source.1.maxdepth = 8
pop.subpop.0.species.pipe.source.1.tries = 1

pop.subpop.0.species.pipe.source.2 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.05

pop.subpop.0.species.pipe.source.3 = zhixing.jss.cpxInd.algorithm.Multiform.individual.reproduce.ATCrossover4TGP
pop.subpop.0.species.pipe.source.3.prob = 0.3
pop.subpop.0.species.pipe.source.3.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.3.source.1 = zhixing.jss.cpxInd.algorithm.Multiform.individual.reproduce.Tournament_merge4Multiform
pop.subpop.0.species.pipe.source.3.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.0.species.pipe.source.3.ns.1 = same
pop.subpop.0.species.pipe.source.3.ns.0.terminals = 0.1
pop.subpop.0.species.pipe.source.3.ns.0.nonterminals = 0.9
pop.subpop.0.species.pipe.source.3.ns.0.root = 0.0
pop.subpop.0.species.pipe.source.3.maxdepth = 8
pop.subpop.0.species.pipe.source.3.tries = 50
pop.subpop.0.species.pipe.source.3.maxseglength = 30
pop.subpop.0.species.pipe.source.3.maxlendiffseg = 5
pop.subpop.0.species.pipe.source.3.build.0 = ec.gp.koza.HalfBuilder
pop.subpop.0.species.pipe.source.3.build.0.min-depth = 2
pop.subpop.0.species.pipe.source.3.build.0.max-depth = 8
pop.subpop.0.species.pipe.source.3.build.0.growp = 0.5


# TGP population parameters
pop.subpop.1.species = zhixing.jss.cpxInd.species.CpxGPSpecies
pop.subpop.1.species.ind = zhixing.jss.cpxInd.algorithm.Multiform.individual.TGPIndividual4MForm
pop.subpop.1.species.ind.numtrees = 1
pop.subpop.1.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.1.species.ind.tree.0.tc = tc1

#pop.subpop.1.species.fitness = ec.gp.koza.KozaFitness
pop.subpop.1.species.fitness = ec.multiobjective.MultiObjectiveFitness
pop.subpop.1.species.fitness.num-objectives = 1
pop.subpop.1.species.fitness.maximize = false
pop.subpop.1.duplicate-retries = 100

# GP initializer
init = ec.gp.GPInitializer

# GP breeding pipeline
pop.subpop.1.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.1.species.pipe.generate-max = false
pop.subpop.1.species.pipe.num-sources = 4

pop.subpop.1.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.1.species.pipe.source.0.prob = 0.5
pop.subpop.1.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.0.source.1 = same
pop.subpop.1.species.pipe.source.0.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.1.species.pipe.source.0.ns.1 = same
pop.subpop.1.species.pipe.source.0.ns.0.terminals = 0.1
pop.subpop.1.species.pipe.source.0.ns.0.nonterminals = 0.9
pop.subpop.1.species.pipe.source.0.ns.0.root = 0.0
pop.subpop.1.species.pipe.source.0.maxdepth = 8
pop.subpop.1.species.pipe.source.0.tries = 1


pop.subpop.1.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.1.species.pipe.source.1.prob = 0.15
pop.subpop.1.species.pipe.source.1.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.1.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.1.species.pipe.source.1.ns.0.terminals = 0.1
pop.subpop.1.species.pipe.source.1.ns.0.nonterminals = 0.9
pop.subpop.1.species.pipe.source.1.ns.0.root = 0.0
pop.subpop.1.species.pipe.source.1.build.0 = ec.gp.koza.GrowBuilder
pop.subpop.1.species.pipe.source.1.build.0.min-depth = 4
pop.subpop.1.species.pipe.source.1.build.0.max-depth = 4
pop.subpop.1.species.pipe.source.1.maxdepth = 8
pop.subpop.1.species.pipe.source.1.tries = 1

pop.subpop.1.species.pipe.source.2 = ec.breed.ReproductionPipeline
pop.subpop.1.species.pipe.source.2.prob = 0.05

pop.subpop.1.species.pipe.source.3 = zhixing.jss.cpxInd.algorithm.Multiform.individual.reproduce.ATCrossover4TGP
pop.subpop.1.species.pipe.source.3.prob = 0.3
pop.subpop.1.species.pipe.source.3.source.0 = ec.select.TournamentSelection
pop.subpop.1.species.pipe.source.3.source.1 = zhixing.jss.cpxInd.algorithm.Multiform.individual.reproduce.Tournament_merge4Multiform
pop.subpop.1.species.pipe.source.3.ns.0 = ec.gp.koza.KozaNodeSelector
pop.subpop.1.species.pipe.source.3.ns.1 = same
pop.subpop.1.species.pipe.source.3.ns.0.terminals = 0.1
pop.subpop.1.species.pipe.source.3.ns.0.nonterminals = 0.9
pop.subpop.1.species.pipe.source.3.ns.0.root = 0.0
pop.subpop.1.species.pipe.source.3.maxdepth = 8
pop.subpop.1.species.pipe.source.3.tries = 50
pop.subpop.1.species.pipe.source.3.maxseglength = 30
pop.subpop.1.species.pipe.source.3.maxlendiffseg = 5
pop.subpop.1.species.pipe.source.3.build.0 = ec.gp.koza.HalfBuilder
pop.subpop.1.species.pipe.source.3.build.0.min-depth = 2
pop.subpop.1.species.pipe.source.3.build.0.max-depth = 8
pop.subpop.1.species.pipe.source.3.build.0.growp = 0.5

# Selection for reproduction
breed.reproduce.source.0 = ec.select.TournamentSelection
#breed.reproduce.re-evaluate = true


#LGP 2-point crossover parameters
lgp.2pcross.maxseglength = 30
lgp.2pcross.maxlendiffseg = 5
lgp.2pcross.maxdistancecrosspoint = 30
lgp.2pcross.effective = false


lgp.micromut.step = 1
lgp.micromut.effective = true
lgp.micromut.probfunc = 0.5
lgp.micromut.probcons = 0.125
lgp.micromut.probwritereg = 0.25
lgp.micromut.probreadreg = 0.125
lgp.micromut.conststep = 10

#LGP macro mutation parameters
#effmut
lgp.macromut.type = effmut
lgp.macromut.step = 1
lgp.macromut.prob_insert = 0.67
lgp.macromut.prob_delete = 0.33

# Tournament selection, for reproduction, crossover and mutation
select.tournament.size = 7


# LGP node selector, for crossover and mutation
lgp.ns.nonterminals = 0.25
lgp.ns.root = 0.25
lgp.ns.constants = 0.25
lgp.ns.read_registers = 0.25

# GP atomic (a) and set (s) type parameters
gp.type.a.size = 1
gp.type.a.0.name = nil
gp.type.s.size = 0

# GP tree constraints
gp.tc.size = 2
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = nil
gp.tc.0.init = ec.gp.koza.HalfBuilder
gp.tc.0.init.min-depth = 3
#the same as the maximum depth of instructions
gp.tc.0.init.max-depth = 3
gp.tc.0.init.growp = 0.0
gp.tc.0.init.prob_constant = 0.5

gp.tc.1 = ec.gp.GPTreeConstraints
gp.tc.1.name = tc1
gp.tc.1.fset = f1
gp.tc.1.returns = nil
gp.tc.1.init = ec.gp.koza.HalfBuilder
gp.tc.1.init.min-depth = 2
#the same as the maximum depth of instructions
gp.tc.1.init.max-depth = 6
gp.tc.1.init.growp = 0.5


# GP node constraints (nc[k] means the node takes k children), no other constraint
gp.nc.size = 7

gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = nc0
gp.nc.0.returns = nil
gp.nc.0.size = 0

gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = nc1
gp.nc.1.returns = nil
gp.nc.1.size = 1
gp.nc.1.child.0 = nil

gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = nc2
gp.nc.2.returns = nil
gp.nc.2.size = 2
gp.nc.2.child.0 = nil
gp.nc.2.child.1 = nil

gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = nc3
gp.nc.3.returns = nil
gp.nc.3.size = 3
gp.nc.3.child.0 = nil
gp.nc.3.child.1 = nil
gp.nc.3.child.2 = nil

gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = nc4
gp.nc.4.returns = nil
gp.nc.4.size = 4
gp.nc.4.child.0 = nil
gp.nc.4.child.1 = nil
gp.nc.4.child.2 = nil
gp.nc.4.child.3 = nil

gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = nc5
gp.nc.5.returns = nil
gp.nc.5.size = 5
gp.nc.5.child.0 = nil
gp.nc.5.child.1 = nil
gp.nc.5.child.2 = nil
gp.nc.5.child.3 = nil
gp.nc.5.child.4 = nil

gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = nc6
gp.nc.6.returns = nil
gp.nc.6.size = 6
gp.nc.6.child.0 = nil
gp.nc.6.child.1 = nil
gp.nc.6.child.2 = nil
gp.nc.6.child.3 = nil
gp.nc.6.child.4 = nil
gp.nc.6.child.5 = nil

# GP ADF parameters
gp.problem.stack = ec.gp.ADFStack
gp.adf-stack.context = ec.gp.ADFContext

# ==============================
# GP problem specific parameters
# ==============================

# GP function set parameters
gp.fs.size = 2
gp.fs.0.name = f0
gp.fs.0.size = 7
gp.fs.0.func.0 = yimei.jss.gp.terminal.TerminalERCUniform
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = yimei.jss.gp.function.Add
gp.fs.0.func.1.nc = nc2
gp.fs.0.func.2 = yimei.jss.gp.function.Sub
gp.fs.0.func.2.nc = nc2
gp.fs.0.func.3 = yimei.jss.gp.function.Mul
gp.fs.0.func.3.nc = nc2
gp.fs.0.func.4 = yimei.jss.gp.function.Div
gp.fs.0.func.4.nc = nc2
gp.fs.0.func.5 = yimei.jss.gp.function.Max
gp.fs.0.func.5.nc = nc2
gp.fs.0.func.6 = yimei.jss.gp.function.Min
gp.fs.0.func.6.nc = nc2
#gp.fs.0.func.7 = yimei.jss.gp.function.If
#gp.fs.0.func.7.nc = nc3


gp.fs.1.name = f1
gp.fs.1.size = 7
gp.fs.1.func.0 = yimei.jss.gp.terminal.TerminalERCUniform
gp.fs.1.func.0.nc = nc0
gp.fs.1.func.1 = yimei.jss.gp.function.Add
gp.fs.1.func.1.nc = nc2
gp.fs.1.func.2 = yimei.jss.gp.function.Sub
gp.fs.1.func.2.nc = nc2
gp.fs.1.func.3 = yimei.jss.gp.function.Mul
gp.fs.1.func.3.nc = nc2
gp.fs.1.func.4 = yimei.jss.gp.function.Div
gp.fs.1.func.4.nc = nc2
gp.fs.1.func.5 = yimei.jss.gp.function.Max
gp.fs.1.func.5.nc = nc2
gp.fs.1.func.6 = yimei.jss.gp.function.Min
gp.fs.1.func.6.nc = nc2
#gp.fs.1.func.7 = yimei.jss.gp.function.If
#gp.fs.1.func.7.nc = nc3


# ==============================
# The output format
# ==============================
#gp.tree.print-style = c
#pop.subpop.0.species.ind.tree.0.c-operators = false
#gp.tree.print-style = dot

# ==============================
# The problem
# ==============================

eval.problem = zhixing.jss.cpxInd.individualoptimization.IndividualOptimizationProblem
eval.problem.data = yimei.jss.gp.data.DoubleData
eval.problem.eval-model = zhixing.jss.cpxInd.individualevaluation.SimpleEvaluationModel4Ind
eval.problem.eval-model.objectives = 1
eval.problem.eval-model.objectives.0 = max-tardiness
eval.problem.eval-model.sim-models = 1
eval.problem.eval-model.sim-models.0.util-level = 0.95
eval.problem.eval-model.rotate-sim-seed = true

terminals-from = relative